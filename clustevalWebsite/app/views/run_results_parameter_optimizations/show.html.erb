<% content_for :title, "Parameter Optimization Run Result '" + @runResult.absPath.split('/')[-1] + "'" %>

<h3><a name="navigation">Navigation</a></h3>
<ul title="Navigation">
	<li><a href="#general">General Information</a></li>
<% for i in 0..@runResultsParamOpt.length-1 %>
<li><a href="#<%= i.to_s %>"><%= @dataConfigs[i].absPath.split('/')[-1] + ' & ' + @programConfigs[i].absPath.split('/')[-1] %></a></li>
<% end %>
</ul>
<h3><a name="general"></a>General Information</a></h3>
<table id="runResultsParameterOptimization" class="display">
	<thead>
		<tr>
			<th>Information</th>
			<th>Value</th>
		</tr>
  	</thead>
  	<tbody>
  	<tr>
  		<td>Run</td><td><%= link_to @runResult.run.name, @runResult.run %></td>
  	</tr>
  	<tr>
  		<td>Run type</td><td><%= @runResult.run.run_type.name %></td>
  	</tr>
  	<tr>
  		<td>Log</td><td><textarea rows="10" cols="30" readonly="readonly"><%= @logContents %></textarea></td>
  	</tr>
	</tbody>
 </table>
  <% for i in 0..@runResultsParamOpt.length-1 %>
  <% runResultsParam = @runResultsParamOpt[i] %>
  <% @dataConfig = @dataConfigs[i] %>
  <% @programConfig = @programConfigs[i] %>
  <h3><a name="<%= i.to_s %>"><%= @dataConfig.absPath.split('/')[-1] + ' & ' + @programConfig.absPath.split('/')[-1] %></a></h3>
  <a href="#navigation">To top ^</a>
  <table class="display">
  <thead>
	<tr>
	<th>Information</th>
	<th>Value</th>
	</tr>
  </thead>
  	<tbody>
  <tr>
    <td>Name</td><td><%= runResultsParam.absPath.split('/')[-3] + '/' + runResultsParam.absPath.split('/')[-2] + '/' + runResultsParam.absPath.split('/')[-1] %></td>
  </tr>
  <tr>
    <td>Data Config</td><td><%= link_to @dataConfig.absPath.split('/')[-1], @dataConfig %></td>
  </tr>
  <tr>
    <td>Program Config</td><td><%= link_to @programConfig.absPath.split('/')[-1], @programConfig %></td>
  </tr>
  <tr>
    <td>Invocation line</td><td><%= @invocationLines[i] %></td>
  </tr>
  <tr>
  	<td>Default parameter values (Run Config)</td><td><% @paramValues = RunExecutionParameterValue.where(:run_execution_id => @runExecution.id).where(:program_config_id => @programConfig.id) %><% @paramValues.each do |paramValue| %><%= paramValue.program_parameter.name %>=<%= paramValue.value %><br /><% end %></td>
  </tr>
  <tr>
  	<td>Default parameter values (Program Config)</td><td><% @params = ProgramParameter.where(:program_config_id => @programConfig.id) %><% @params.each do |param| %><%= param.name %>=<%= param.def %><br /><% end %></td>
  </tr>
  	<tr>
  		<td>Optimization method</td>
  		<td><%= RunParameterOptimizationMethod.includes(:parameter_optimization_method).where(:run_parameter_optimization_id => @run.id).where(:program_config_id => @programConfig.id)[0].parameter_optimization_method.name %></td>
  	</tr>
  <tr>
	<td>Optimization Process</td>
  	<td>
  		<div id="showContainer<%= i %>" class="showContainer"><center><br>Show optimization process</center></div>
  		<div id="container<%= i %>">
		  	<div id="resizable<%= i %>1" class="resizable" style="height:400px; width:100%;">
		  		Choose parameter for x-axis: <%= select_tag "Parameter_" + i.to_s, options_from_collection_for_select(@parameterNames[i], "name", "name"), :onchange => "init" + i.to_s + "();" %>
				<div id="chart_<%= i %>"></div>
			</div>
			<br>
		  	<div id="resizable<%= i %>2" class="resizable" style="height:400px; width:100%;">
				<div id="chart_iter_<%= i %>"></div>
			</div>
			<table id="iterations_<%= i.to_s %>" class="iterations display" style="width:100;">
				<thead>
			  <tr>
			    <th>Iteration</th>
			    <th>Parameter set</th>
			    <th>Clustering Quality Measure</th>
			    <th>Quality</th>
			    <th>Clustering</th>
			  </tr>
				</thead>
				<tbody>
					<%#= raw @paramValuesTableStrings[i] %>
				</tbody>
				<tfoot>
			  <tr>
			    <th>Iteration</th>
			    <th>Parameter set</th>
			    <th>Clustering Quality Measure</th>
			    <th>Quality</th>
			    <th>Clustering</th>
			  </tr>
				</tfoot>
			</table>
		</div>
	</td>
  </tr>
  </tbody>
</table>
  <% end %>
<script type="text/javascript" charset="utf-8">
	//$(document).ready(function() {
		<% for i in 0..@runResultsParamOpt.length-1 %>
		function init<%= i.to_s%>() {

			$('#iterations_<%= i.to_s %>').dataTable({
				sPaginationType: "full_numbers",
				sDom: 'WT<"clear"><"H"Rlfr>t<"F"ip>',
				oTableTools: {
					sSwfPath: "/assets/dataTables/copy_csv_xls.swf",
					aButtons: ['copy', 'csv']
				},
				bDeferRender: true,
				bJQueryUI: true,
				bDestroy: true,
				bProcessing: true,
				sAjaxSource: '/<%= params[:repository] %>/run_results_parameter_optimizations/fetch_table_data/<%= params[:id] %>/<%= @dataConfigs[i].id.to_s %>/<%= @programConfigs[i].id.to_s %>'})
			.columnFilter(
				{aoColumns: [ 
					{ type: "number" },
					{ type: "text" },
					{ type: "select" },
					{ type: "number-range" },
				    null
				]
			});

			$("#showContainer<%= i.to_s %>").show();
			$("#container<%= i.to_s %>").hide();
            $("#showContainer<%= i.to_s %>").addClass("indivLoading"); 
			// Load data asynchronously using jQuery. On success, add the data
	        // to the options and initiate the chart.
	        // This data is obtained by exporting a GA custom report to TSV.
	        // http://api.jquery.com/jQuery.get/

	        var paramSelect = document.getElementById("Parameter_" + <%= i %>);
	        var selectedParam = paramSelect.options[paramSelect.selectedIndex].value;

	        jQuery.get('/<%= params[:repository] %>/run_results_parameter_optimizations/fetch_graph_data/<%= params[:id] %>/<%= @dataConfigs[i].id.to_s %>/<%= @programConfigs[i].id.to_s %>/' + selectedParam, null, function(tsv, state, xhr) {
				var options1, options2, 
					chart1, chart2, 
					lines = [],
	                seriesIds = {},
	                series1 = [],
	                series2 = [],
	                id,
	                paramOptions,
	                xval;

	            paramOptions = [];

				options1 = {
					chart: {
						type: "scatter",
						renderTo: "chart_<%= i %>",
						zoomType: 'xy'
					},
					title: {
						text: "<%= @runResultsParamOpt[i].absPath.split('/')[-1] %>"
					},
					yAxis: {
						title: {
							text: "Clustering quality"
						}
					},
					xAxis: {
						title: {
							text: selectedParam
						}
					},
		            plotOptions: {
		                scatter: {
		                    marker: {
		                        radius: 2,
		                    },
		                    turboThreshold: 100,
		                    shadow: false
		                }
		            },
					series: [
					<% for m in 0..@runResultsQualityMeasures.length-1 %>
					{
						name: "<%= @runResultsQualityMeasures[m].clustering_quality_measure.alias %>",
						visible: <%= m == 0 ? 'true' : 'false' %>,
						data: []
					}
					<%= m < @runResultsQualityMeasures.length-1 ? ',' : '' %>
					<% end %>
					]
				}

				options2 = {
					chart: {
						type: "scatter",
						renderTo: "chart_iter_<%= i %>",
						zoomType: 'xy'
					},
					title: {
						text: "<%= @runResultsParamOpt[i].absPath.split('/')[-1] %>"
					},
					yAxis: {
						title: {
							text: "Clustering quality"
						}
					},
					xAxis: {
						title: {
							text: "Iteration"
						}
					},
		            plotOptions: {
		                scatter: {
		                    marker: {
		                        radius: 2,
		                    },
		                    turboThreshold: 100
		                }
		            },
					series: [
					<% for m in 0..@runResultsQualityMeasures.length-1 %>
					{
						name: "<%= @runResultsQualityMeasures[m].clustering_quality_measure.alias %>",
						visible: <%= m == 0 ? 'true' : 'false' %>,
						data: []
					}
					<%= m < @runResultsQualityMeasures.length-1 ? ',' : '' %>
					<% end %>
					]
				}

				<% for m in 0..@runResultsQualityMeasures.length-1 %>
					seriesIds['<%= @runResultsQualityMeasures[m].clustering_quality_measure.alias %>'] = parseInt(<%= m %>);
					series1[parseInt(<%= m %>)] = [];
					series2[parseInt(<%= m %>)] = [];
				<% end %>

	            // split the data return into lines and parse them
	            tsv = tsv.split(/\n/);
	            jQuery.each(tsv, function(i, line) {
	            	if (line == "")
	            		return;
	                line = line.split('\t');
	                id = seriesIds[line[0]];

	                if (!isNaN(parseFloat(line[1]))) {
                		series1[id].push([parseFloat(line[1]),parseFloat(line[2])]);
                	}
	                else {
	            		xval = paramOptions.indexOf(line[1]);
	            		if (xval == -1) {
	            			xval = paramOptions.push(line[1])-1;
	            		}
	            		series1[id].push([xval,parseFloat(line[2])]);
	            	}
	                series2[id].push([parseInt(line[3]),parseFloat(line[2])]);
	            });
		      
			$("#showContainer<%= i.to_s %>").hide();
			$("#container<%= i.to_s %>").show();


		        chart1 = new Highcharts.Chart(options1);
		        chart2 = new Highcharts.Chart(options2);

	            chart1.showLoading();
	            chart2.showLoading();
	            // set parameter options as categories of x axis
	            if (paramOptions.length > 0) {
	            	chart1.xAxis[0].setCategories(paramOptions);
	            }
	    
	    		<% for m in 0..@runResultsQualityMeasures.length-1 %>
	    			chart1.series[<%= m %>].setData(series1[<%= m %>], redraw=false);
	    			chart2.series[<%= m %>].setData(series2[<%= m %>], redraw=false);
	            <% end %>
	            chart1.hideLoading()
	            chart1.redraw();
	            chart2.hideLoading()
	            chart2.redraw();

		      $( "#resizable<%= i %>1" ).resizable({
		        helper: "ui-resizable-helper",
		        stop: function( event, ui ) {
		          chart1.setSize(ui.size.width,ui.size.height,doAnimation = true);
		        }
		      });

		      $( "#resizable<%= i %>2" ).resizable({
		        helper: "ui-resizable-helper",
		        stop: function( event, ui ) {
		          chart2.setSize(ui.size.width,ui.size.height,doAnimation = true);
		        }
		      });
        	});
		};
		$("#container<%= i.to_s %>").hide();
		$("#showContainer<%= i.to_s %>").click(function() {
			init<%= i.to_s %>();
		});
		<% end %>
</script>
